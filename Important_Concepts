Macros and Global Variables
Inline and Default Arguments
Constant Variables

Macros and Global Variables:

#include <iostream>
using namespace std;

#define MULTIPLY(a, b) a*b

int main(){
    cout << MULTIPLY(2+3, 3+5);
    return 0;
}

The answer will be 16..
MULTIPLY(a, b)" will be replaced by "a*b" in code. So, MULTIPLY(2+3, 3+5) will be replaced by 2+3*3+5.
And according to operator precedence, multiply operator (*) has higher precedence than plus operator (+). So, 3*3 will be evaluated first. Hence expression will become : 2+9+5 = 16


#include <iostream>
using namespace std;

#define SQUARE(x) x*x

int main(){
    int x = 36 / SQUARE(6);
    cout << x;

    return 0;
}

The output here will be 36

2) Inline and Default Arguments

Inline functions are used to reduce the function call overhead. Inline function is a function that is expanded in line when it is called.

Default parameters must be added last in C++ functions

And all the parameters of a function can be default parametersâ€¦





3) Constant Variables

#include <iostream>
using namespace std;

int main(){
    int p = 5;
    int const *q = &p;
}

The statement that will give error here is (*q)++

#include <iostream>
using namespace std;

int main(){
    int p = 5;
    int * const q = &p;
}
The statement that will give error here is (q)++

#include <iostream>
using namespace std;

int main(){
    int p = 5;
    int const * const q = &p;
}

The statements that give error are (*q)++ and q++

#include <iostream>
using namespace std;

int main(){
    const int p = 5;
    int const *q = &p;
}

The statements that give error are p++ and (*q)++
